{
	"id": "f1144611c502cf8ded94d1a629f22bcc",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.13",
	"solcLongVersion": "0.8.13+commit.abaa5c0e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/src/MerkleClaimERC20.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.13;\n\n/// ============ Imports ============\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; // Solmate: ERC20\nimport { MerkleProof } from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\"; // OZ: MerkleProof\n\n/// @title MerkleClaimERC20\n/// @notice ERC20 claimable by members of a merkle tree\n/// @author Anish Agnihotri <contact@anishagnihotri.com>\n/// @author Luigy Lemon \n/// @dev Solmate ERC20 includes unused _burn logic that can be removed to optimize deployment cost\ncontract MerkleClaimERC20 {\n\n  /// ============ Immutable storage ============\n\n  /// @notice ERC20-claimee inclusion root\n  bytes32 public immutable merkleRoot;\n  IERC20 public immutable token;\n  /// ============ Mutable storage ============\n\n  /// @notice Mapping of addresses who have claimed tokens\n  mapping(address => bool) public hasClaimed;\n\n  /// ============ Errors ============\n\n  /// @notice Thrown if address has already claimed\n  error AlreadyClaimed();\n  /// @notice Thrown if address/amount are not part of Merkle tree\n  error NotInMerkle();\n\n  /// ============ Constructor ============\n\n  /// @notice Creates a new MerkleClaimERC20 contract for already existing ERC20\n  /// @param _tokenAddress of token\n  /// @param _merkleRoot of claimees\n  constructor(\n    address _tokenAddress,\n    bytes32 _merkleRoot\n  ) {\n    merkleRoot = _merkleRoot; // Update root\n    token = IERC20(_tokenAddress);\n  }\n\n  /// ============ Events ============\n\n  /// @notice Emitted after a successful token claim\n  /// @param to recipient of claim\n  /// @param amount of tokens claimed\n  event Claim(address indexed to, uint256 amount);\n\n  /// ============ Functions ============\n\n  /// @notice Allows claiming tokens if address is part of merkle tree\n  /// @param to address of claimee\n  /// @param amount of tokens owed to claimee\n  /// @param proof merkle proof to prove address and amount are in tree\n  function claim(address to, uint256 amount, bytes32[] calldata proof) external {\n    // Throw if address has already claimed tokens\n    if (hasClaimed[to]) revert AlreadyClaimed();\n\n    // Verify merkle proof, or revert if not in tree\n    bytes32 leaf = keccak256(abi.encodePacked(to, amount));\n    bool isValidLeaf = MerkleProof.verify(proof, merkleRoot, leaf);\n    if (!isValidLeaf) revert NotInMerkle();\n\n    // Set address to claimed\n    hasClaimed[to] = true;\n\n    // Send tokens to address\n    token.transfer(to, amount);\n\n    // Emit claim event\n    emit Claim(to, amount);\n  }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"MerkleProof": {
					"abi": [],
					"devdoc": {
						"details": "These functions deal with verification of Merkle Trees proofs. The proofs can be generated using the JavaScript library https://github.com/miguelmota/merkletreejs[merkletreejs]. Note: the hashing algorithm should be keccak256 and pair sorting should be enabled. See `test/utils/cryptography/MerkleProof.test.js` for some examples. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":800:2577  library MerkleProof {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":800:2577  library MerkleProof {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122095540040bafbb32f5394a3280d6d74e659d18657dab602cf899a7caccfa1edc564736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122095540040bafbb32f5394a3280d6d74e659d18657dab602cf899a7caccfa1edc564736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 SLOAD STOP BLOCKHASH 0xBA 0xFB 0xB3 0x2F MSTORE8 SWAP5 LOG3 0x28 0xD PUSH14 0x74E659D18657DAB602CF899A7CAC 0xCF LOG1 0xED 0xC5 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "800:1777:1:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;800:1777:1;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122095540040bafbb32f5394a3280d6d74e659d18657dab602cf899a7caccfa1edc564736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 SLOAD STOP BLOCKHASH 0xBA 0xFB 0xB3 0x2F MSTORE8 SWAP5 LOG3 0x28 0xD PUSH14 0x74E659D18657DAB602CF899A7CAC 0xCF LOG1 0xED 0xC5 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "800:1777:1:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_efficientHash(bytes32,bytes32)": "infinite",
								"processProof(bytes32[] memory,bytes32)": "infinite",
								"verify(bytes32[] memory,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 1,
									"value": "B"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "BYTE",
									"source": 1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 1,
									"value": "24"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MSTORE8",
									"source": 1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122095540040bafbb32f5394a3280d6d74e659d18657dab602cf899a7caccfa1edc564736f6c634300080d0033",
									".code": [
										{
											"begin": 800,
											"end": 2577,
											"name": "PUSHDEPLOYADDRESS",
											"source": 1
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Trees proofs. The proofs can be generated using the JavaScript library https://github.com/miguelmota/merkletreejs[merkletreejs]. Note: the hashing algorithm should be keccak256 and pair sorting should be enabled. See `test/utils/cryptography/MerkleProof.test.js` for some examples. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1aa68fa19422863cc91d23b5896917dbe79175ed47b591148aaeb3e98cb49752\",\"dweb:/ipfs/QmeY64vTRbGhdXcytRKusfJsAfNF4aqr9e1SGBGdCYvW2j\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/src/MerkleClaimERC20.sol": {
				"MerkleClaimERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_tokenAddress",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "_merkleRoot",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "AlreadyClaimed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInMerkle",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Claim",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes32[]",
									"name": "proof",
									"type": "bytes32[]"
								}
							],
							"name": "claim",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "hasClaimed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "merkleRoot",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Anish Agnihotri <contact@anishagnihotri.com>Luigy Lemon ",
						"details": "Solmate ERC20 includes unused _burn logic that can be removed to optimize deployment cost",
						"events": {
							"Claim(address,uint256)": {
								"params": {
									"amount": "of tokens claimed",
									"to": "recipient of claim"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"claim(address,uint256,bytes32[])": {
								"params": {
									"amount": "of tokens owed to claimee",
									"proof": "merkle proof to prove address and amount are in tree",
									"to": "address of claimee"
								}
							},
							"constructor": {
								"params": {
									"_merkleRoot": "of claimees",
									"_tokenAddress": "of token"
								}
							}
						},
						"title": "MerkleClaimERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/src/MerkleClaimERC20.sol\":572:2559  contract MerkleClaimERC20 {... */\n  mstore(0x40, 0xc0)\n    /* \"contracts/src/MerkleClaimERC20.sol\":1332:1485  constructor(... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/src/MerkleClaimERC20.sol\":1406:1430  merkleRoot = _merkleRoot */\n  0x80\n  mstore\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"contracts/src/MerkleClaimERC20.sol\":1451:1480  token = IERC20(_tokenAddress) */\n  and\n  0xa0\n  mstore\n    /* \"contracts/src/MerkleClaimERC20.sol\":572:2559  contract MerkleClaimERC20 {... */\n  jump(tag_7)\n    /* \"#utility.yul\":14:365   */\ntag_3:\n    /* \"#utility.yul\":93:99   */\n  0x00\n    /* \"#utility.yul\":101:107   */\n  dup1\n    /* \"#utility.yul\":154:156   */\n  0x40\n    /* \"#utility.yul\":142:151   */\n  dup4\n    /* \"#utility.yul\":133:140   */\n  dup6\n    /* \"#utility.yul\":129:152   */\n  sub\n    /* \"#utility.yul\":125:157   */\n  slt\n    /* \"#utility.yul\":122:174   */\n  iszero\n  tag_9\n  jumpi\n    /* \"#utility.yul\":170:171   */\n  0x00\n    /* \"#utility.yul\":167:168   */\n  dup1\n    /* \"#utility.yul\":160:172   */\n  revert\n    /* \"#utility.yul\":122:174   */\ntag_9:\n    /* \"#utility.yul\":196:212   */\n  dup3\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":241:272   */\n  dup2\n  and\n    /* \"#utility.yul\":231:273   */\n  dup2\n  eq\n    /* \"#utility.yul\":221:291   */\n  tag_10\n  jumpi\n    /* \"#utility.yul\":287:288   */\n  0x00\n    /* \"#utility.yul\":284:285   */\n  dup1\n    /* \"#utility.yul\":277:289   */\n  revert\n    /* \"#utility.yul\":221:291   */\ntag_10:\n    /* \"#utility.yul\":355:357   */\n  0x20\n    /* \"#utility.yul\":340:358   */\n  swap4\n  swap1\n  swap4\n  add\n    /* \"#utility.yul\":334:359   */\n  mload\n    /* \"#utility.yul\":310:315   */\n  swap3\n  swap5\n    /* \"#utility.yul\":334:359   */\n  swap3\n  swap4\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":14:365   */\n  jump\t// out\ntag_7:\n    /* \"contracts/src/MerkleClaimERC20.sol\":572:2559  contract MerkleClaimERC20 {... */\n  mload(0x80)\n  mload(0xa0)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x9d6b7fbd0ded42ab14e47300e428df3f38e4fbb3a7f790d898a87bff4f86606b\")\n  0x00\n  assignImmutable(\"0x26fde711c36747908dcce028baf2d3e8303b2122f2368e04f010a3f01eaa4df4\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/src/MerkleClaimERC20.sol\":572:2559  contract MerkleClaimERC20 {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x2eb4a7ab\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x3d13f874\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x73b2e80e\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xfc0c546a\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/src/MerkleClaimERC20.sol\":697:732  bytes32 public immutable merkleRoot */\n    tag_3:\n      tag_7\n      immutable(\"0x26fde711c36747908dcce028baf2d3e8303b2122f2368e04f010a3f01eaa4df4\")\n      dup2\n      jump\n    tag_7:\n      mload(0x40)\n        /* \"#utility.yul\":160:185   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":148:150   */\n      0x20\n        /* \"#utility.yul\":133:151   */\n      add\n        /* \"contracts/src/MerkleClaimERC20.sol\":697:732  bytes32 public immutable merkleRoot */\n    tag_9:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/src/MerkleClaimERC20.sol\":1974:2557  function claim(address to, uint256 amount, bytes32[] calldata proof) external {... */\n    tag_4:\n      tag_11\n      tag_12\n      calldatasize\n      0x04\n      tag_13\n      jump\t// in\n    tag_12:\n      tag_14\n      jump\t// in\n    tag_11:\n      stop\n        /* \"contracts/src/MerkleClaimERC20.sol\":877:919  mapping(address => bool) public hasClaimed */\n    tag_5:\n      tag_15\n      tag_16\n      calldatasize\n      0x04\n      tag_17\n      jump\t// in\n    tag_16:\n      0x00\n      0x20\n      dup2\n      swap1\n      mstore\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\n    tag_15:\n      mload(0x40)\n        /* \"#utility.yul\":1492:1506   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1485:1507   */\n      iszero\n        /* \"#utility.yul\":1467:1508   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1455:1457   */\n      0x20\n        /* \"#utility.yul\":1440:1458   */\n      add\n        /* \"contracts/src/MerkleClaimERC20.sol\":877:919  mapping(address => bool) public hasClaimed */\n      tag_9\n        /* \"#utility.yul\":1327:1514   */\n      jump\n        /* \"contracts/src/MerkleClaimERC20.sol\":736:765  IERC20 public immutable token */\n    tag_6:\n      tag_21\n      immutable(\"0x9d6b7fbd0ded42ab14e47300e428df3f38e4fbb3a7f790d898a87bff4f86606b\")\n      dup2\n      jump\n    tag_21:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1696:1728   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1678:1729   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1666:1668   */\n      0x20\n        /* \"#utility.yul\":1651:1669   */\n      add\n        /* \"contracts/src/MerkleClaimERC20.sol\":736:765  IERC20 public immutable token */\n      tag_9\n        /* \"#utility.yul\":1519:1735   */\n      jump\n        /* \"contracts/src/MerkleClaimERC20.sol\":1974:2557  function claim(address to, uint256 amount, bytes32[] calldata proof) external {... */\n    tag_14:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/src/MerkleClaimERC20.sol\":2113:2127  hasClaimed[to] */\n      dup5\n      and\n        /* \"contracts/src/MerkleClaimERC20.sol\":2113:2123  hasClaimed */\n      0x00\n        /* \"contracts/src/MerkleClaimERC20.sol\":2113:2127  hasClaimed[to] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/src/MerkleClaimERC20.sol\":2109:2152  if (hasClaimed[to]) revert AlreadyClaimed() */\n      iszero\n      tag_26\n      jumpi\n        /* \"contracts/src/MerkleClaimERC20.sol\":2136:2152  AlreadyClaimed() */\n      mload(0x40)\n      shl(0xe3, 0x0c8d9eab)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/src/MerkleClaimERC20.sol\":2109:2152  if (hasClaimed[to]) revert AlreadyClaimed() */\n    tag_26:\n        /* \"contracts/src/MerkleClaimERC20.sol\":2237:2265  abi.encodePacked(to, amount) */\n      mload(0x40)\n      not(0xffffffffffffffffffffffff)\n        /* \"#utility.yul\":1917:1919   */\n      0x60\n        /* \"#utility.yul\":1913:1928   */\n      dup7\n      swap1\n      shl\n        /* \"#utility.yul\":1909:1962   */\n      and\n        /* \"contracts/src/MerkleClaimERC20.sol\":2237:2265  abi.encodePacked(to, amount) */\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":1897:1963   */\n      mstore\n        /* \"#utility.yul\":1979:1991   */\n      0x34\n      dup2\n      add\n        /* \"#utility.yul\":1972:2000   */\n      dup5\n      swap1\n      mstore\n        /* \"contracts/src/MerkleClaimERC20.sol\":2212:2224  bytes32 leaf */\n      0x00\n      swap1\n        /* \"#utility.yul\":2016:2028   */\n      0x54\n      add\n        /* \"contracts/src/MerkleClaimERC20.sol\":2237:2265  abi.encodePacked(to, amount) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/src/MerkleClaimERC20.sol\":2227:2266  keccak256(abi.encodePacked(to, amount)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"contracts/src/MerkleClaimERC20.sol\":2212:2266  bytes32 leaf = keccak256(abi.encodePacked(to, amount)) */\n      swap1\n      pop\n        /* \"contracts/src/MerkleClaimERC20.sol\":2272:2288  bool isValidLeaf */\n      0x00\n        /* \"contracts/src/MerkleClaimERC20.sol\":2291:2334  MerkleProof.verify(proof, merkleRoot, leaf) */\n      tag_29\n        /* \"contracts/src/MerkleClaimERC20.sol\":2310:2315  proof */\n      dup5\n      dup5\n        /* \"contracts/src/MerkleClaimERC20.sol\":2291:2334  MerkleProof.verify(proof, merkleRoot, leaf) */\n      dup1\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      0x20\n      mul\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n        /* \"contracts/src/MerkleClaimERC20.sol\":2317:2327  merkleRoot */\n      immutable(\"0x26fde711c36747908dcce028baf2d3e8303b2122f2368e04f010a3f01eaa4df4\")\n      swap3\n      pop\n        /* \"contracts/src/MerkleClaimERC20.sol\":2329:2333  leaf */\n      dup7\n      swap2\n      pop\n        /* \"contracts/src/MerkleClaimERC20.sol\":2291:2309  MerkleProof.verify */\n      tag_30\n      swap1\n      pop\n        /* \"contracts/src/MerkleClaimERC20.sol\":2291:2334  MerkleProof.verify(proof, merkleRoot, leaf) */\n      jump\t// in\n    tag_29:\n        /* \"contracts/src/MerkleClaimERC20.sol\":2272:2334  bool isValidLeaf = MerkleProof.verify(proof, merkleRoot, leaf) */\n      swap1\n      pop\n        /* \"contracts/src/MerkleClaimERC20.sol\":2345:2356  isValidLeaf */\n      dup1\n        /* \"contracts/src/MerkleClaimERC20.sol\":2340:2378  if (!isValidLeaf) revert NotInMerkle() */\n      tag_31\n      jumpi\n        /* \"contracts/src/MerkleClaimERC20.sol\":2365:2378  NotInMerkle() */\n      mload(0x40)\n      shl(0xe1, 0x452c2df1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/src/MerkleClaimERC20.sol\":2340:2378  if (!isValidLeaf) revert NotInMerkle() */\n    tag_31:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/src/MerkleClaimERC20.sol\":2415:2429  hasClaimed[to] */\n      dup7\n      dup2\n      and\n        /* \"contracts/src/MerkleClaimERC20.sol\":2415:2425  hasClaimed */\n      0x00\n        /* \"contracts/src/MerkleClaimERC20.sol\":2415:2429  hasClaimed[to] */\n      dup2\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/src/MerkleClaimERC20.sol\":2415:2436  hasClaimed[to] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/src/MerkleClaimERC20.sol\":2432:2436  true */\n      0x01\n        /* \"contracts/src/MerkleClaimERC20.sol\":2415:2436  hasClaimed[to] = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/src/MerkleClaimERC20.sol\":2473:2499  token.transfer(to, amount) */\n      mload\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":2213:2264   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":2280:2298   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":2273:2307   */\n      dup8\n      swap1\n      mstore\n        /* \"contracts/src/MerkleClaimERC20.sol\":2473:2478  token */\n      immutable(\"0x9d6b7fbd0ded42ab14e47300e428df3f38e4fbb3a7f790d898a87bff4f86606b\")\n        /* \"contracts/src/MerkleClaimERC20.sol\":2473:2487  token.transfer */\n      swap1\n      swap2\n      and\n      swap1\n      0xa9059cbb\n      swap1\n        /* \"#utility.yul\":2186:2204   */\n      0x44\n      add\n        /* \"contracts/src/MerkleClaimERC20.sol\":2473:2499  token.transfer(to, amount) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_35\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_35:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n      pop\n        /* \"contracts/src/MerkleClaimERC20.sol\":2541:2543  to */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/src/MerkleClaimERC20.sol\":2535:2552  Claim(to, amount) */\n      and\n      0x47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4\n        /* \"contracts/src/MerkleClaimERC20.sol\":2545:2551  amount */\n      dup7\n        /* \"contracts/src/MerkleClaimERC20.sol\":2535:2552  Claim(to, amount) */\n      mload(0x40)\n      tag_38\n      swap2\n        /* \"#utility.yul\":160:185   */\n      dup2\n      mstore\n        /* \"#utility.yul\":148:150   */\n      0x20\n        /* \"#utility.yul\":133:151   */\n      add\n      swap1\n        /* \"#utility.yul\":14:191   */\n      jump\n        /* \"contracts/src/MerkleClaimERC20.sol\":2535:2552  Claim(to, amount) */\n    tag_38:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/src/MerkleClaimERC20.sol\":2052:2557  {... */\n      pop\n      pop\n        /* \"contracts/src/MerkleClaimERC20.sol\":1974:2557  function claim(address to, uint256 amount, bytes32[] calldata proof) external {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1154:1338  function verify(... */\n    tag_30:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1275:1279  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1327:1331  root */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1298:1323  processProof(proof, leaf) */\n      tag_41\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1311:1316  proof */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1318:1322  leaf */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1298:1310  processProof */\n      tag_42\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1298:1323  processProof(proof, leaf) */\n      jump\t// in\n    tag_41:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1298:1331  processProof(proof, leaf) == root */\n      eq\n      swap5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1154:1338  function verify(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1689:2351  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n    tag_42:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1772:1779  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1814:1818  leaf */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1772:1779  bytes32 */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1828:2316  for (uint256 i = 0; i < proof.length; i++) {... */\n    tag_44:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1852:1857  proof */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1852:1864  proof.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1848:1849  i */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1848:1864  i < proof.length */\n      lt\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1828:2316  for (uint256 i = 0; i < proof.length; i++) {... */\n      iszero\n      tag_45\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1885:1905  bytes32 proofElement */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1908:1913  proof */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1914:1915  i */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1908:1916  proof[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_48\n      jumpi\n      tag_48\n      tag_49\n      jump\t// in\n    tag_48:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1885:1916  bytes32 proofElement = proof[i] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1950:1962  proofElement */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1934:1946  computedHash */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1934:1962  computedHash <= proofElement */\n      gt\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1930:2306  if (computedHash <= proofElement) {... */\n      tag_50\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2425:2438  bytes32 value */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2473:2488  mstore(0x00, a) */\n      dup4\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2508:2512  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2501:2516  mstore(0x20, b) */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2554:2558  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2538:2559  keccak256(0x00, 0x40) */\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2060:2117  computedHash = _efficientHash(computedHash, proofElement) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1930:2306  if (computedHash <= proofElement) {... */\n      jump(tag_53)\n    tag_50:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2425:2438  bytes32 value */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2473:2488  mstore(0x00, a) */\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2508:2512  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2501:2516  mstore(0x20, b) */\n      dup5\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2554:2558  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2538:2559  keccak256(0x00, 0x40) */\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2234:2291  computedHash = _efficientHash(proofElement, computedHash) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1930:2306  if (computedHash <= proofElement) {... */\n    tag_53:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1866:1869  i++ */\n      dup1\n      tag_55\n      dup2\n      tag_56\n      jump\t// in\n    tag_55:\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1828:2316  for (uint256 i = 0; i < proof.length; i++) {... */\n      jump(tag_44)\n    tag_45:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2332:2344  computedHash */\n      swap4\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1689:2351  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":196:369   */\n    tag_58:\n        /* \"#utility.yul\":264:284   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":313:344   */\n      dup2\n      and\n        /* \"#utility.yul\":303:345   */\n      dup2\n      eq\n        /* \"#utility.yul\":293:363   */\n      tag_62\n      jumpi\n        /* \"#utility.yul\":359:360   */\n      0x00\n        /* \"#utility.yul\":356:357   */\n      dup1\n        /* \"#utility.yul\":349:361   */\n      revert\n        /* \"#utility.yul\":293:363   */\n    tag_62:\n        /* \"#utility.yul\":196:369   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":374:1131   */\n    tag_13:\n        /* \"#utility.yul\":478:484   */\n      0x00\n        /* \"#utility.yul\":486:492   */\n      dup1\n        /* \"#utility.yul\":494:500   */\n      0x00\n        /* \"#utility.yul\":502:508   */\n      dup1\n        /* \"#utility.yul\":555:557   */\n      0x60\n        /* \"#utility.yul\":543:552   */\n      dup6\n        /* \"#utility.yul\":534:541   */\n      dup8\n        /* \"#utility.yul\":530:553   */\n      sub\n        /* \"#utility.yul\":526:558   */\n      slt\n        /* \"#utility.yul\":523:575   */\n      iszero\n      tag_64\n      jumpi\n        /* \"#utility.yul\":571:572   */\n      0x00\n        /* \"#utility.yul\":568:569   */\n      dup1\n        /* \"#utility.yul\":561:573   */\n      revert\n        /* \"#utility.yul\":523:575   */\n    tag_64:\n        /* \"#utility.yul\":594:623   */\n      tag_65\n        /* \"#utility.yul\":613:622   */\n      dup6\n        /* \"#utility.yul\":594:623   */\n      tag_58\n      jump\t// in\n    tag_65:\n        /* \"#utility.yul\":584:623   */\n      swap4\n      pop\n        /* \"#utility.yul\":670:672   */\n      0x20\n        /* \"#utility.yul\":659:668   */\n      dup6\n        /* \"#utility.yul\":655:673   */\n      add\n        /* \"#utility.yul\":642:674   */\n      calldataload\n        /* \"#utility.yul\":632:674   */\n      swap3\n      pop\n        /* \"#utility.yul\":725:727   */\n      0x40\n        /* \"#utility.yul\":714:723   */\n      dup6\n        /* \"#utility.yul\":710:728   */\n      add\n        /* \"#utility.yul\":697:729   */\n      calldataload\n        /* \"#utility.yul\":748:766   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":789:791   */\n      dup1\n        /* \"#utility.yul\":781:787   */\n      dup3\n        /* \"#utility.yul\":778:792   */\n      gt\n        /* \"#utility.yul\":775:809   */\n      iszero\n      tag_66\n      jumpi\n        /* \"#utility.yul\":805:806   */\n      0x00\n        /* \"#utility.yul\":802:803   */\n      dup1\n        /* \"#utility.yul\":795:807   */\n      revert\n        /* \"#utility.yul\":775:809   */\n    tag_66:\n        /* \"#utility.yul\":843:849   */\n      dup2\n        /* \"#utility.yul\":832:841   */\n      dup8\n        /* \"#utility.yul\":828:850   */\n      add\n        /* \"#utility.yul\":818:850   */\n      swap2\n      pop\n        /* \"#utility.yul\":888:895   */\n      dup8\n        /* \"#utility.yul\":881:885   */\n      0x1f\n        /* \"#utility.yul\":877:879   */\n      dup4\n        /* \"#utility.yul\":873:886   */\n      add\n        /* \"#utility.yul\":869:896   */\n      slt\n        /* \"#utility.yul\":859:914   */\n      tag_67\n      jumpi\n        /* \"#utility.yul\":910:911   */\n      0x00\n        /* \"#utility.yul\":907:908   */\n      dup1\n        /* \"#utility.yul\":900:912   */\n      revert\n        /* \"#utility.yul\":859:914   */\n    tag_67:\n        /* \"#utility.yul\":950:952   */\n      dup2\n        /* \"#utility.yul\":937:953   */\n      calldataload\n        /* \"#utility.yul\":976:978   */\n      dup2\n        /* \"#utility.yul\":968:974   */\n      dup2\n        /* \"#utility.yul\":965:979   */\n      gt\n        /* \"#utility.yul\":962:996   */\n      iszero\n      tag_68\n      jumpi\n        /* \"#utility.yul\":992:993   */\n      0x00\n        /* \"#utility.yul\":989:990   */\n      dup1\n        /* \"#utility.yul\":982:994   */\n      revert\n        /* \"#utility.yul\":962:996   */\n    tag_68:\n        /* \"#utility.yul\":1045:1052   */\n      dup9\n        /* \"#utility.yul\":1040:1042   */\n      0x20\n        /* \"#utility.yul\":1030:1036   */\n      dup3\n        /* \"#utility.yul\":1027:1028   */\n      0x05\n        /* \"#utility.yul\":1023:1037   */\n      shl\n        /* \"#utility.yul\":1019:1021   */\n      dup6\n        /* \"#utility.yul\":1015:1038   */\n      add\n        /* \"#utility.yul\":1011:1043   */\n      add\n        /* \"#utility.yul\":1008:1053   */\n      gt\n        /* \"#utility.yul\":1005:1070   */\n      iszero\n      tag_69\n      jumpi\n        /* \"#utility.yul\":1066:1067   */\n      0x00\n        /* \"#utility.yul\":1063:1064   */\n      dup1\n        /* \"#utility.yul\":1056:1068   */\n      revert\n        /* \"#utility.yul\":1005:1070   */\n    tag_69:\n        /* \"#utility.yul\":374:1131   */\n      swap6\n      swap9\n      swap5\n      swap8\n      pop\n      pop\n        /* \"#utility.yul\":1097:1099   */\n      0x20\n        /* \"#utility.yul\":1089:1100   */\n      add\n      swap5\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":374:1131   */\n      jump\t// out\n        /* \"#utility.yul\":1136:1322   */\n    tag_17:\n        /* \"#utility.yul\":1195:1201   */\n      0x00\n        /* \"#utility.yul\":1248:1250   */\n      0x20\n        /* \"#utility.yul\":1236:1245   */\n      dup3\n        /* \"#utility.yul\":1227:1234   */\n      dup5\n        /* \"#utility.yul\":1223:1246   */\n      sub\n        /* \"#utility.yul\":1219:1251   */\n      slt\n        /* \"#utility.yul\":1216:1268   */\n      iszero\n      tag_71\n      jumpi\n        /* \"#utility.yul\":1264:1265   */\n      0x00\n        /* \"#utility.yul\":1261:1262   */\n      dup1\n        /* \"#utility.yul\":1254:1266   */\n      revert\n        /* \"#utility.yul\":1216:1268   */\n    tag_71:\n        /* \"#utility.yul\":1287:1316   */\n      tag_72\n        /* \"#utility.yul\":1306:1315   */\n      dup3\n        /* \"#utility.yul\":1287:1316   */\n      tag_58\n      jump\t// in\n    tag_72:\n        /* \"#utility.yul\":1277:1316   */\n      swap4\n        /* \"#utility.yul\":1136:1322   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2318:2595   */\n    tag_37:\n        /* \"#utility.yul\":2385:2391   */\n      0x00\n        /* \"#utility.yul\":2438:2440   */\n      0x20\n        /* \"#utility.yul\":2426:2435   */\n      dup3\n        /* \"#utility.yul\":2417:2424   */\n      dup5\n        /* \"#utility.yul\":2413:2436   */\n      sub\n        /* \"#utility.yul\":2409:2441   */\n      slt\n        /* \"#utility.yul\":2406:2458   */\n      iszero\n      tag_78\n      jumpi\n        /* \"#utility.yul\":2454:2455   */\n      0x00\n        /* \"#utility.yul\":2451:2452   */\n      dup1\n        /* \"#utility.yul\":2444:2456   */\n      revert\n        /* \"#utility.yul\":2406:2458   */\n    tag_78:\n        /* \"#utility.yul\":2486:2495   */\n      dup2\n        /* \"#utility.yul\":2480:2496   */\n      mload\n        /* \"#utility.yul\":2539:2544   */\n      dup1\n        /* \"#utility.yul\":2532:2545   */\n      iszero\n        /* \"#utility.yul\":2525:2546   */\n      iszero\n        /* \"#utility.yul\":2518:2523   */\n      dup2\n        /* \"#utility.yul\":2515:2547   */\n      eq\n        /* \"#utility.yul\":2505:2565   */\n      tag_72\n      jumpi\n        /* \"#utility.yul\":2561:2562   */\n      0x00\n        /* \"#utility.yul\":2558:2559   */\n      dup1\n        /* \"#utility.yul\":2551:2563   */\n      revert\n        /* \"#utility.yul\":2782:2909   */\n    tag_49:\n        /* \"#utility.yul\":2843:2853   */\n      0x4e487b71\n        /* \"#utility.yul\":2838:2841   */\n      0xe0\n        /* \"#utility.yul\":2834:2854   */\n      shl\n        /* \"#utility.yul\":2831:2832   */\n      0x00\n        /* \"#utility.yul\":2824:2855   */\n      mstore\n        /* \"#utility.yul\":2874:2878   */\n      0x32\n        /* \"#utility.yul\":2871:2872   */\n      0x04\n        /* \"#utility.yul\":2864:2879   */\n      mstore\n        /* \"#utility.yul\":2898:2902   */\n      0x24\n        /* \"#utility.yul\":2895:2896   */\n      0x00\n        /* \"#utility.yul\":2888:2903   */\n      revert\n        /* \"#utility.yul\":2914:3146   */\n    tag_56:\n        /* \"#utility.yul\":2953:2956   */\n      0x00\n        /* \"#utility.yul\":2974:2991   */\n      0x01\n      dup3\n      add\n        /* \"#utility.yul\":2971:3111   */\n      tag_83\n      jumpi\n        /* \"#utility.yul\":3033:3043   */\n      0x4e487b71\n        /* \"#utility.yul\":3028:3031   */\n      0xe0\n        /* \"#utility.yul\":3024:3044   */\n      shl\n        /* \"#utility.yul\":3021:3022   */\n      0x00\n        /* \"#utility.yul\":3014:3045   */\n      mstore\n        /* \"#utility.yul\":3068:3072   */\n      0x11\n        /* \"#utility.yul\":3065:3066   */\n      0x04\n        /* \"#utility.yul\":3058:3073   */\n      mstore\n        /* \"#utility.yul\":3096:3100   */\n      0x24\n        /* \"#utility.yul\":3093:3094   */\n      0x00\n        /* \"#utility.yul\":3086:3101   */\n      revert\n        /* \"#utility.yul\":2971:3111   */\n    tag_83:\n      pop\n        /* \"#utility.yul\":3138:3139   */\n      0x01\n        /* \"#utility.yul\":3127:3140   */\n      add\n      swap1\n        /* \"#utility.yul\":2914:3146   */\n      jump\t// out\n\n    auxdata: 0xa26469706673582212203d7fa88f6a85750cedad21168cb1f9468e538a13ea9c8c2c25f44fb463fec51f64736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_213": {
									"entryPoint": null,
									"id": 213,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_addresst_bytes32_fromMemory": {
									"entryPoint": 67,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:367:3",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:3",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "112:253:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "158:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "167:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "170:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "160:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "160:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "160:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "133:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "142:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "129:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "129:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "154:2:3",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "125:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "125:32:3"
															},
															"nodeType": "YulIf",
															"src": "122:52:3"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "183:29:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "202:9:3"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "196:5:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "196:16:3"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "187:5:3",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "275:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "284:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "287:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "277:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "277:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "277:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "234:5:3"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "245:5:3"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "260:3:3",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "265:1:3",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "256:3:3"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "256:11:3"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "269:1:3",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "252:3:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "252:19:3"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "241:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "241:31:3"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "231:2:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "231:42:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "224:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "224:50:3"
															},
															"nodeType": "YulIf",
															"src": "221:70:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "300:15:3",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "310:5:3"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "300:6:3"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "324:35:3",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "344:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "355:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "340:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "340:18:3"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "334:5:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "334:25:3"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "324:6:3"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bytes32_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "70:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "81:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "93:6:3",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "101:6:3",
														"type": ""
													}
												],
												"src": "14:351:3"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_addresst_bytes32_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        value1 := mload(add(headStart, 32))\n    }\n}",
									"id": 3,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60c060405234801561001057600080fd5b506040516105a13803806105a183398101604081905261002f91610043565b6080526001600160a01b031660a05261007d565b6000806040838503121561005657600080fd5b82516001600160a01b038116811461006d57600080fd5b6020939093015192949293505050565b60805160a0516104f36100ae6000396000818160d80152610251015260008181605601526101c401526104f36000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632eb4a7ab146100515780633d13f8741461008b57806373b2e80e146100a0578063fc0c546a146100d3575b600080fd5b6100787f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b61009e6100993660046103b2565b610112565b005b6100c36100ae36600461043c565b60006020819052908152604090205460ff1681565b6040519015158152602001610082565b6100fa7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610082565b6001600160a01b03841660009081526020819052604090205460ff161561014c57604051630c8d9eab60e31b815260040160405180910390fd5b6040516bffffffffffffffffffffffff19606086901b1660208201526034810184905260009060540160405160208183030381529060405280519060200120905060006101ef8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f0000000000000000000000000000000000000000000000000000000000000000925086915061030c9050565b90508061020f5760405163452c2df160e11b815260040160405180910390fd5b6001600160a01b0386811660008181526020819052604090819020805460ff191660011790555163a9059cbb60e01b81526004810191909152602481018790527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af115801561029c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c0919061045e565b50856001600160a01b03167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4866040516102fc91815260200190565b60405180910390a2505050505050565b6000826103198584610322565b14949350505050565b600081815b845181101561038e57600085828151811061034457610344610480565b6020026020010151905080831161036a576000838152602082905260409020925061037b565b600081815260208490526040902092505b508061038681610496565b915050610327565b509392505050565b80356001600160a01b03811681146103ad57600080fd5b919050565b600080600080606085870312156103c857600080fd5b6103d185610396565b935060208501359250604085013567ffffffffffffffff808211156103f557600080fd5b818701915087601f83011261040957600080fd5b81358181111561041857600080fd5b8860208260051b850101111561042d57600080fd5b95989497505060200194505050565b60006020828403121561044e57600080fd5b61045782610396565b9392505050565b60006020828403121561047057600080fd5b8151801515811461045757600080fd5b634e487b7160e01b600052603260045260246000fd5b6000600182016104b657634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212203d7fa88f6a85750cedad21168cb1f9468e538a13ea9c8c2c25f44fb463fec51f64736f6c634300080d0033",
							"opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x5A1 CODESIZE SUB DUP1 PUSH2 0x5A1 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x43 JUMP JUMPDEST PUSH1 0x80 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 MSTORE PUSH2 0x7D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD MLOAD SWAP3 SWAP5 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x4F3 PUSH2 0xAE PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH1 0xD8 ADD MSTORE PUSH2 0x251 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH1 0x56 ADD MSTORE PUSH2 0x1C4 ADD MSTORE PUSH2 0x4F3 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x3D13F874 EQ PUSH2 0x8B JUMPI DUP1 PUSH4 0x73B2E80E EQ PUSH2 0xA0 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0xD3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x78 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9E PUSH2 0x99 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B2 JUMP JUMPDEST PUSH2 0x112 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC3 PUSH2 0xAE CALLDATASIZE PUSH1 0x4 PUSH2 0x43C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x82 JUMP JUMPDEST PUSH2 0xFA PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x82 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x14C JUMPI PUSH1 0x40 MLOAD PUSH4 0xC8D9EAB PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP7 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x1EF DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH32 0x0 SWAP3 POP DUP7 SWAP2 POP PUSH2 0x30C SWAP1 POP JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x20F JUMPI PUSH1 0x40 MLOAD PUSH4 0x452C2DF1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x29C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C0 SWAP2 SWAP1 PUSH2 0x45E JUMP JUMPDEST POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x47CEE97CB7ACD717B3C0AA1435D004CD5B3C8C57D70DBCEB4E4458BBD60E39D4 DUP7 PUSH1 0x40 MLOAD PUSH2 0x2FC SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x319 DUP6 DUP5 PUSH2 0x322 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x38E JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x344 JUMPI PUSH2 0x344 PUSH2 0x480 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 GT PUSH2 0x36A JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP PUSH2 0x37B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP JUMPDEST POP DUP1 PUSH2 0x386 DUP2 PUSH2 0x496 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x327 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D1 DUP6 PUSH2 0x396 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x42D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x44E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x457 DUP3 PUSH2 0x396 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x470 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x4B6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE PUSH32 0xA88F6A85750CEDAD21168CB1F9468E538A13EA9C8C2C25F44FB463FEC51F6473 PUSH16 0x6C634300080D00330000000000000000 ",
							"sourceMap": "572:1987:2:-:0;;;1332:153;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1406:24;;-1:-1:-1;;;;;1451:29:2;;;572:1987;;14:351:3;93:6;101;154:2;142:9;133:7;129:23;125:32;122:52;;;170:1;167;160:12;122:52;196:16;;-1:-1:-1;;;;;241:31:3;;231:42;;221:70;;287:1;284;277:12;221:70;355:2;340:18;;;;334:25;310:5;;334:25;;-1:-1:-1;;;14:351:3:o;:::-;572:1987:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_efficientHash_169": {
									"entryPoint": null,
									"id": 169,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@claim_282": {
									"entryPoint": 274,
									"id": 282,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@hasClaimed_188": {
									"entryPoint": null,
									"id": 188,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@merkleRoot_180": {
									"entryPoint": null,
									"id": 180,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@processProof_158": {
									"entryPoint": 802,
									"id": 158,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@token_183": {
									"entryPoint": null,
									"id": 183,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@verify_101": {
									"entryPoint": 780,
									"id": 101,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 918,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1084,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256t_array$_t_bytes32_$dyn_calldata_ptr": {
									"entryPoint": 946,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 1118,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IERC20_$77__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 1174,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x32": {
									"entryPoint": 1152,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:3148:3",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:3",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "115:76:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "125:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "137:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "148:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "133:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "133:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "125:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "167:9:3"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "178:6:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "160:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "160:25:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "160:25:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "84:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "95:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "106:4:3",
														"type": ""
													}
												],
												"src": "14:177:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "245:124:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "255:29:3",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "277:6:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "264:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "264:20:3"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "255:5:3"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "347:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "356:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "359:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "349:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "349:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "349:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "306:5:3"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "317:5:3"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "332:3:3",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "337:1:3",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "328:3:3"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "328:11:3"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "341:1:3",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "324:3:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "324:19:3"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "313:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "313:31:3"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "303:2:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "303:42:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "296:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "296:50:3"
															},
															"nodeType": "YulIf",
															"src": "293:70:3"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "224:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "235:5:3",
														"type": ""
													}
												],
												"src": "196:173:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "513:618:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "559:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "568:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "571:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "561:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "561:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "561:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "534:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "543:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "530:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "530:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "555:2:3",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "526:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "526:32:3"
															},
															"nodeType": "YulIf",
															"src": "523:52:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "584:39:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "613:9:3"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "594:18:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "594:29:3"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "584:6:3"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "632:42:3",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "659:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "670:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "655:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "655:18:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "642:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "642:32:3"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "632:6:3"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "683:46:3",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "714:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "725:2:3",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "710:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "710:18:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "697:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "697:32:3"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "687:6:3",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "738:28:3",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "748:18:3",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "742:2:3",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "793:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "802:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "805:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "795:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "795:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "795:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "781:6:3"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "789:2:3"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "778:2:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "778:14:3"
															},
															"nodeType": "YulIf",
															"src": "775:34:3"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "818:32:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "832:9:3"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "843:6:3"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "828:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "828:22:3"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "822:2:3",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "898:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "907:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "910:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "900:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "900:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "900:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "877:2:3"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "881:4:3",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "873:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "873:13:3"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "888:7:3"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "869:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "869:27:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "862:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "862:35:3"
															},
															"nodeType": "YulIf",
															"src": "859:55:3"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "923:30:3",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "950:2:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "937:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "937:16:3"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "927:6:3",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "980:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "989:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "992:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "982:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "982:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "982:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "968:6:3"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "976:2:3"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "965:2:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "965:14:3"
															},
															"nodeType": "YulIf",
															"src": "962:34:3"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1054:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1063:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1066:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1056:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1056:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1056:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "1019:2:3"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1027:1:3",
																								"type": "",
																								"value": "5"
																							},
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "1030:6:3"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1023:3:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1023:14:3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1015:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1015:23:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1040:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1011:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1011:32:3"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1045:7:3"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1008:2:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1008:45:3"
															},
															"nodeType": "YulIf",
															"src": "1005:65:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1079:21:3",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "1093:2:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1097:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1089:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1089:11:3"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1079:6:3"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1109:16:3",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "1119:6:3"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "1109:6:3"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_array$_t_bytes32_$dyn_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "455:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "466:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "478:6:3",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "486:6:3",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "494:6:3",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "502:6:3",
														"type": ""
													}
												],
												"src": "374:757:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1206:116:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1252:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1261:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1264:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1254:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1254:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1254:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1227:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1236:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1223:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1223:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1248:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1219:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1219:32:3"
															},
															"nodeType": "YulIf",
															"src": "1216:52:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1277:39:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1306:9:3"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1287:18:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1287:29:3"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1277:6:3"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1172:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1183:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1195:6:3",
														"type": ""
													}
												],
												"src": "1136:186:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1422:92:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1432:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1444:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1455:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1440:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1440:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1432:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1474:9:3"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1499:6:3"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1492:6:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1492:14:3"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1485:6:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1485:22:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1467:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1467:41:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1467:41:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1391:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1402:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1413:4:3",
														"type": ""
													}
												],
												"src": "1327:187:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1633:102:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1643:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1655:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1666:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1651:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1651:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1643:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1685:9:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1700:6:3"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1716:3:3",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1721:1:3",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1712:3:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1712:11:3"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1725:1:3",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1708:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1708:19:3"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1696:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1696:32:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1678:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1678:51:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1678:51:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20_$77__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1602:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1613:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1624:4:3",
														"type": ""
													}
												],
												"src": "1519:216:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1887:147:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1904:3:3"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1917:2:3",
																						"type": "",
																						"value": "96"
																					},
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1921:6:3"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "1913:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1913:15:3"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1934:26:3",
																						"type": "",
																						"value": "0xffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "1930:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1930:31:3"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1909:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1909:53:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1897:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1897:66:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1897:66:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1983:3:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1988:2:3",
																				"type": "",
																				"value": "20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1979:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1979:12:3"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "1993:6:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1972:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1972:28:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1972:28:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2009:19:3",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2020:3:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2025:2:3",
																		"type": "",
																		"value": "52"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2016:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2016:12:3"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2009:3:3"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1855:3:3",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1860:6:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1868:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1879:3:3",
														"type": ""
													}
												],
												"src": "1740:294:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2168:145:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2178:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2190:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2201:2:3",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2186:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2186:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2178:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2220:9:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2235:6:3"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2251:3:3",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2256:1:3",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "2247:3:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2247:11:3"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2260:1:3",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2243:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2243:19:3"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2231:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2231:32:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2213:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2213:51:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2213:51:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2284:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2295:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2280:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2280:18:3"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "2300:6:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2273:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2273:34:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2273:34:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2129:9:3",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2140:6:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2148:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2159:4:3",
														"type": ""
													}
												],
												"src": "2039:274:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2396:199:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2442:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2451:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2454:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2444:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2444:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2444:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2417:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2426:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2413:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2413:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2438:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2409:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2409:32:3"
															},
															"nodeType": "YulIf",
															"src": "2406:52:3"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2467:29:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2486:9:3"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2480:5:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2480:16:3"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2471:5:3",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2549:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2558:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2561:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2551:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2551:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2551:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2518:5:3"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "2539:5:3"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "2532:6:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2532:13:3"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2525:6:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2525:21:3"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2515:2:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2515:32:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2508:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2508:40:3"
															},
															"nodeType": "YulIf",
															"src": "2505:60:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2574:15:3",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2584:5:3"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2574:6:3"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2362:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2373:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2385:6:3",
														"type": ""
													}
												],
												"src": "2318:277:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2701:76:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2711:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2723:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2734:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2719:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2719:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2711:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2753:9:3"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2764:6:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2746:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2746:25:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2746:25:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2670:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2681:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2692:4:3",
														"type": ""
													}
												],
												"src": "2600:177:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2814:95:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2831:1:3",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2838:3:3",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2843:10:3",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2834:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2834:20:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2824:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2824:31:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2824:31:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2871:1:3",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2874:4:3",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2864:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2864:15:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2864:15:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2895:1:3",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2898:4:3",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2888:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2888:15:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2888:15:3"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "2782:127:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2961:185:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3000:111:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3021:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3028:3:3",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3033:10:3",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "3024:3:3"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3024:20:3"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3014:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3014:31:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3014:31:3"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3065:1:3",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3068:4:3",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3058:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3058:15:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3058:15:3"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3093:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3096:4:3",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3086:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3086:15:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3086:15:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2977:5:3"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2988:1:3",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2984:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2984:6:3"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2974:2:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2974:17:3"
															},
															"nodeType": "YulIf",
															"src": "2971:140:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3120:20:3",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3131:5:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3138:1:3",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3127:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3127:13:3"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "3120:3:3"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2943:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "2953:3:3",
														"type": ""
													}
												],
												"src": "2914:232:3"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value2 := add(_2, 32)\n        value3 := length\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$77__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), not(0xffffffffffffffffffffffff)))\n        mstore(add(pos, 20), value1)\n        end := add(pos, 52)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n}",
									"id": 3,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"180": [
									{
										"length": 32,
										"start": 86
									},
									{
										"length": 32,
										"start": 452
									}
								],
								"183": [
									{
										"length": 32,
										"start": 216
									},
									{
										"length": 32,
										"start": 593
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061004c5760003560e01c80632eb4a7ab146100515780633d13f8741461008b57806373b2e80e146100a0578063fc0c546a146100d3575b600080fd5b6100787f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b61009e6100993660046103b2565b610112565b005b6100c36100ae36600461043c565b60006020819052908152604090205460ff1681565b6040519015158152602001610082565b6100fa7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610082565b6001600160a01b03841660009081526020819052604090205460ff161561014c57604051630c8d9eab60e31b815260040160405180910390fd5b6040516bffffffffffffffffffffffff19606086901b1660208201526034810184905260009060540160405160208183030381529060405280519060200120905060006101ef8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f0000000000000000000000000000000000000000000000000000000000000000925086915061030c9050565b90508061020f5760405163452c2df160e11b815260040160405180910390fd5b6001600160a01b0386811660008181526020819052604090819020805460ff191660011790555163a9059cbb60e01b81526004810191909152602481018790527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af115801561029c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c0919061045e565b50856001600160a01b03167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4866040516102fc91815260200190565b60405180910390a2505050505050565b6000826103198584610322565b14949350505050565b600081815b845181101561038e57600085828151811061034457610344610480565b6020026020010151905080831161036a576000838152602082905260409020925061037b565b600081815260208490526040902092505b508061038681610496565b915050610327565b509392505050565b80356001600160a01b03811681146103ad57600080fd5b919050565b600080600080606085870312156103c857600080fd5b6103d185610396565b935060208501359250604085013567ffffffffffffffff808211156103f557600080fd5b818701915087601f83011261040957600080fd5b81358181111561041857600080fd5b8860208260051b850101111561042d57600080fd5b95989497505060200194505050565b60006020828403121561044e57600080fd5b61045782610396565b9392505050565b60006020828403121561047057600080fd5b8151801515811461045757600080fd5b634e487b7160e01b600052603260045260246000fd5b6000600182016104b657634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212203d7fa88f6a85750cedad21168cb1f9468e538a13ea9c8c2c25f44fb463fec51f64736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x3D13F874 EQ PUSH2 0x8B JUMPI DUP1 PUSH4 0x73B2E80E EQ PUSH2 0xA0 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0xD3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x78 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9E PUSH2 0x99 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B2 JUMP JUMPDEST PUSH2 0x112 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC3 PUSH2 0xAE CALLDATASIZE PUSH1 0x4 PUSH2 0x43C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x82 JUMP JUMPDEST PUSH2 0xFA PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x82 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x14C JUMPI PUSH1 0x40 MLOAD PUSH4 0xC8D9EAB PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP7 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x1EF DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH32 0x0 SWAP3 POP DUP7 SWAP2 POP PUSH2 0x30C SWAP1 POP JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x20F JUMPI PUSH1 0x40 MLOAD PUSH4 0x452C2DF1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x29C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C0 SWAP2 SWAP1 PUSH2 0x45E JUMP JUMPDEST POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x47CEE97CB7ACD717B3C0AA1435D004CD5B3C8C57D70DBCEB4E4458BBD60E39D4 DUP7 PUSH1 0x40 MLOAD PUSH2 0x2FC SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x319 DUP6 DUP5 PUSH2 0x322 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x38E JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x344 JUMPI PUSH2 0x344 PUSH2 0x480 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 GT PUSH2 0x36A JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP PUSH2 0x37B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP JUMPDEST POP DUP1 PUSH2 0x386 DUP2 PUSH2 0x496 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x327 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D1 DUP6 PUSH2 0x396 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x42D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x44E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x457 DUP3 PUSH2 0x396 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x470 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x4B6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE PUSH32 0xA88F6A85750CEDAD21168CB1F9468E538A13EA9C8C2C25F44FB463FEC51F6473 PUSH16 0x6C634300080D00330000000000000000 ",
							"sourceMap": "572:1987:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;697:35;;;;;;;;160:25:3;;;148:2;133:18;697:35:2;;;;;;;;1974:583;;;;;;:::i;:::-;;:::i;:::-;;877:42;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;1492:14:3;;1485:22;1467:41;;1455:2;1440:18;877:42:2;1327:187:3;736:29:2;;;;;;;;-1:-1:-1;;;;;1696:32:3;;;1678:51;;1666:2;1651:18;736:29:2;1519:216:3;1974:583:2;-1:-1:-1;;;;;2113:14:2;;:10;:14;;;;;;;;;;;;;2109:43;;;2136:16;;-1:-1:-1;;;2136:16:2;;;;;;;;;;;2109:43;2237:28;;-1:-1:-1;;1917:2:3;1913:15;;;1909:53;2237:28:2;;;1897:66:3;1979:12;;;1972:28;;;2212:12:2;;2016::3;;2237:28:2;;;;;;;;;;;;2227:39;;;;;;2212:54;;2272:16;2291:43;2310:5;;2291:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2317:10:2;;-1:-1:-1;2329:4:2;;-1:-1:-1;2291:18:2;;-1:-1:-1;2291:43:2:i;:::-;2272:62;;2345:11;2340:38;;2365:13;;-1:-1:-1;;;2365:13:2;;;;;;;;;;;2340:38;-1:-1:-1;;;;;2415:14:2;;;:10;:14;;;;;;;;;;;;:21;;-1:-1:-1;;2415:21:2;2432:4;2415:21;;;2473:26;-1:-1:-1;;;2473:26:2;;;;;2213:51:3;;;;2280:18;;;2273:34;;;2473:5:2;:14;;;;;;2186:18:3;;2473:26:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2541:2;-1:-1:-1;;;;;2535:17:2;;2545:6;2535:17;;;;160:25:3;;148:2;133:18;;14:177;2535:17:2;;;;;;;;2052:505;;1974:583;;;;:::o;1154:184:1:-;1275:4;1327;1298:25;1311:5;1318:4;1298:12;:25::i;:::-;:33;;1154:184;-1:-1:-1;;;;1154:184:1:o;1689:662::-;1772:7;1814:4;1772:7;1828:488;1852:5;:12;1848:1;:16;1828:488;;;1885:20;1908:5;1914:1;1908:8;;;;;;;;:::i;:::-;;;;;;;1885:31;;1950:12;1934;:28;1930:376;;2425:13;2473:15;;;2508:4;2501:15;;;2554:4;2538:21;;2060:57;;1930:376;;;2425:13;2473:15;;;2508:4;2501:15;;;2554:4;2538:21;;2234:57;;1930:376;-1:-1:-1;1866:3:1;;;;:::i;:::-;;;;1828:488;;;-1:-1:-1;2332:12:1;1689:662;-1:-1:-1;;;1689:662:1:o;196:173:3:-;264:20;;-1:-1:-1;;;;;313:31:3;;303:42;;293:70;;359:1;356;349:12;293:70;196:173;;;:::o;374:757::-;478:6;486;494;502;555:2;543:9;534:7;530:23;526:32;523:52;;;571:1;568;561:12;523:52;594:29;613:9;594:29;:::i;:::-;584:39;;670:2;659:9;655:18;642:32;632:42;;725:2;714:9;710:18;697:32;748:18;789:2;781:6;778:14;775:34;;;805:1;802;795:12;775:34;843:6;832:9;828:22;818:32;;888:7;881:4;877:2;873:13;869:27;859:55;;910:1;907;900:12;859:55;950:2;937:16;976:2;968:6;965:14;962:34;;;992:1;989;982:12;962:34;1045:7;1040:2;1030:6;1027:1;1023:14;1019:2;1015:23;1011:32;1008:45;1005:65;;;1066:1;1063;1056:12;1005:65;374:757;;;;-1:-1:-1;;1097:2:3;1089:11;;-1:-1:-1;;;374:757:3:o;1136:186::-;1195:6;1248:2;1236:9;1227:7;1223:23;1219:32;1216:52;;;1264:1;1261;1254:12;1216:52;1287:29;1306:9;1287:29;:::i;:::-;1277:39;1136:186;-1:-1:-1;;;1136:186:3:o;2318:277::-;2385:6;2438:2;2426:9;2417:7;2413:23;2409:32;2406:52;;;2454:1;2451;2444:12;2406:52;2486:9;2480:16;2539:5;2532:13;2525:21;2518:5;2515:32;2505:60;;2561:1;2558;2551:12;2782:127;2843:10;2838:3;2834:20;2831:1;2824:31;2874:4;2871:1;2864:15;2898:4;2895:1;2888:15;2914:232;2953:3;2974:17;;;2971:140;;3033:10;3028:3;3024:20;3021:1;3014:31;3068:4;3065:1;3058:15;3096:4;3093:1;3086:15;2971:140;-1:-1:-1;3138:1:3;3127:13;;2914:232::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "253400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"claim(address,uint256,bytes32[])": "infinite",
								"hasClaimed(address)": "2556",
								"merkleRoot()": "infinite",
								"token()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 572,
									"end": 2559,
									"name": "PUSH",
									"source": 2,
									"value": "C0"
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "PUSHSIZE",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "CODESIZE",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "PUSHSIZE",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "tag",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 1332,
									"end": 1485,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1406,
									"end": 1430,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 1406,
									"end": 1430,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1451,
									"end": 1480,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1451,
									"end": 1480,
									"name": "PUSH",
									"source": 2,
									"value": "A0"
								},
								{
									"begin": 1451,
									"end": 1480,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "7"
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 14,
									"end": 365,
									"name": "tag",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 365,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 93,
									"end": 99,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 101,
									"end": 107,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 154,
									"end": 156,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 142,
									"end": 151,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 133,
									"end": 140,
									"name": "DUP6",
									"source": 3
								},
								{
									"begin": 129,
									"end": 152,
									"name": "SUB",
									"source": 3
								},
								{
									"begin": 125,
									"end": 157,
									"name": "SLT",
									"source": 3
								},
								{
									"begin": 122,
									"end": 174,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 122,
									"end": 174,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "9"
								},
								{
									"begin": 122,
									"end": 174,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 170,
									"end": 171,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 167,
									"end": 168,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 160,
									"end": 172,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 122,
									"end": 174,
									"name": "tag",
									"source": 3,
									"value": "9"
								},
								{
									"begin": 122,
									"end": 174,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 196,
									"end": 212,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 196,
									"end": 212,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 241,
									"end": 272,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 241,
									"end": 272,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 231,
									"end": 273,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 231,
									"end": 273,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 221,
									"end": 291,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "10"
								},
								{
									"begin": 221,
									"end": 291,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 287,
									"end": 288,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 284,
									"end": 285,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 277,
									"end": 289,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 221,
									"end": 291,
									"name": "tag",
									"source": 3,
									"value": "10"
								},
								{
									"begin": 221,
									"end": 291,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 355,
									"end": 357,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 340,
									"end": 358,
									"name": "SWAP4",
									"source": 3
								},
								{
									"begin": 340,
									"end": 358,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 340,
									"end": 358,
									"name": "SWAP4",
									"source": 3
								},
								{
									"begin": 340,
									"end": 358,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 334,
									"end": 359,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 310,
									"end": 315,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 310,
									"end": 315,
									"name": "SWAP5",
									"source": 3
								},
								{
									"begin": 334,
									"end": 359,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 334,
									"end": 359,
									"name": "SWAP4",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 365,
									"name": "JUMP",
									"source": 3,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 365,
									"name": "tag",
									"source": 3,
									"value": "7"
								},
								{
									"begin": 14,
									"end": 365,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "PUSH",
									"source": 2,
									"value": "A0"
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "ASSIGNIMMUTABLE",
									"source": 2,
									"value": "183"
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "ASSIGNIMMUTABLE",
									"source": 2,
									"value": "180"
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 572,
									"end": 2559,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203d7fa88f6a85750cedad21168cb1f9468e538a13ea9c8c2c25f44fb463fec51f64736f6c634300080d0033",
									".code": [
										{
											"begin": 572,
											"end": 2559,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "PUSH",
											"source": 2,
											"value": "2EB4A7AB"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "PUSH",
											"source": 2,
											"value": "3D13F874"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "PUSH",
											"source": 2,
											"value": "73B2E80E"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "PUSH",
											"source": 2,
											"value": "FC0C546A"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 572,
											"end": 2559,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 697,
											"end": 732,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 697,
											"end": 732,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 697,
											"end": 732,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 697,
											"end": 732,
											"name": "PUSHIMMUTABLE",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 697,
											"end": 732,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 697,
											"end": 732,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 697,
											"end": 732,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 697,
											"end": 732,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 697,
											"end": 732,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 697,
											"end": 732,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 160,
											"end": 185,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 160,
											"end": 185,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 160,
											"end": 185,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 148,
											"end": 150,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 133,
											"end": 151,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 697,
											"end": 732,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 697,
											"end": 732,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 697,
											"end": 732,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 697,
											"end": 732,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 697,
											"end": 732,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 697,
											"end": 732,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 697,
											"end": 732,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 697,
											"end": 732,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 697,
											"end": 732,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 877,
											"end": 919,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 877,
											"end": 919,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 877,
											"end": 919,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 877,
											"end": 919,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 877,
											"end": 919,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 877,
											"end": 919,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 877,
											"end": 919,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 877,
											"end": 919,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 877,
											"end": 919,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 877,
											"end": 919,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 877,
											"end": 919,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 877,
											"end": 919,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 877,
											"end": 919,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 877,
											"end": 919,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 877,
											"end": 919,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 877,
											"end": 919,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 877,
											"end": 919,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 877,
											"end": 919,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 877,
											"end": 919,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 877,
											"end": 919,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 877,
											"end": 919,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 877,
											"end": 919,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 877,
											"end": 919,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 877,
											"end": 919,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 877,
											"end": 919,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 877,
											"end": 919,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 877,
											"end": 919,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 877,
											"end": 919,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 877,
											"end": 919,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 877,
											"end": 919,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1506,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1492,
											"end": 1506,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1485,
											"end": 1507,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1467,
											"end": 1508,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1467,
											"end": 1508,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1455,
											"end": 1457,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1440,
											"end": 1458,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 877,
											"end": 919,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 1327,
											"end": 1514,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 736,
											"end": 765,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 736,
											"end": 765,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 736,
											"end": 765,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 736,
											"end": 765,
											"name": "PUSHIMMUTABLE",
											"source": 2,
											"value": "183"
										},
										{
											"begin": 736,
											"end": 765,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 736,
											"end": 765,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 736,
											"end": 765,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 736,
											"end": 765,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 736,
											"end": 765,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 736,
											"end": 765,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1696,
											"end": 1728,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1696,
											"end": 1728,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1696,
											"end": 1728,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1678,
											"end": 1729,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1678,
											"end": 1729,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1666,
											"end": 1668,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1651,
											"end": 1669,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 736,
											"end": 765,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 1519,
											"end": 1735,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2113,
											"end": 2127,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2113,
											"end": 2127,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2113,
											"end": 2123,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2113,
											"end": 2127,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2113,
											"end": 2127,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2113,
											"end": 2127,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2113,
											"end": 2127,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2113,
											"end": 2127,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2113,
											"end": 2127,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2113,
											"end": 2127,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2113,
											"end": 2127,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2113,
											"end": 2127,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2113,
											"end": 2127,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2113,
											"end": 2127,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2113,
											"end": 2127,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 2113,
											"end": 2127,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2109,
											"end": 2152,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2109,
											"end": 2152,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 2109,
											"end": 2152,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2136,
											"end": 2152,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2136,
											"end": 2152,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C8D9EAB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2136,
											"end": 2152,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2136,
											"end": 2152,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2136,
											"end": 2152,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2136,
											"end": 2152,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2136,
											"end": 2152,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2136,
											"end": 2152,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2136,
											"end": 2152,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2136,
											"end": 2152,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2136,
											"end": 2152,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2136,
											"end": 2152,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2136,
											"end": 2152,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2109,
											"end": 2152,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 2109,
											"end": 2152,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2237,
											"end": 2265,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2237,
											"end": 2265,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1917,
											"end": 1919,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 1913,
											"end": 1928,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1913,
											"end": 1928,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1913,
											"end": 1928,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 1909,
											"end": 1962,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2237,
											"end": 2265,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2237,
											"end": 2265,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2237,
											"end": 2265,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1897,
											"end": 1963,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1979,
											"end": 1991,
											"name": "PUSH",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 1979,
											"end": 1991,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1979,
											"end": 1991,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1972,
											"end": 2000,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1972,
											"end": 2000,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1972,
											"end": 2000,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2212,
											"end": 2224,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2212,
											"end": 2224,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2016,
											"end": 2028,
											"name": "PUSH",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 2016,
											"end": 2028,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2237,
											"end": 2265,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2237,
											"end": 2265,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2237,
											"end": 2265,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2237,
											"end": 2265,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2237,
											"end": 2265,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2237,
											"end": 2265,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2237,
											"end": 2265,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2237,
											"end": 2265,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2237,
											"end": 2265,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2237,
											"end": 2265,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2237,
											"end": 2265,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2237,
											"end": 2265,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2227,
											"end": 2266,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2227,
											"end": 2266,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2227,
											"end": 2266,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2227,
											"end": 2266,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2227,
											"end": 2266,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2227,
											"end": 2266,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2212,
											"end": 2266,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2212,
											"end": 2266,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2272,
											"end": 2288,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 2310,
											"end": 2315,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2310,
											"end": 2315,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "CALLDATACOPY",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2327,
											"name": "PUSHIMMUTABLE",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 2317,
											"end": 2327,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2329,
											"end": 2333,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2329,
											"end": 2333,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2291,
											"end": 2309,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 2291,
											"end": 2309,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 2291,
											"end": 2334,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2272,
											"end": 2334,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2272,
											"end": 2334,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2345,
											"end": 2356,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2340,
											"end": 2378,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 2340,
											"end": 2378,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2365,
											"end": 2378,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2365,
											"end": 2378,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "452C2DF1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2365,
											"end": 2378,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2365,
											"end": 2378,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2365,
											"end": 2378,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2365,
											"end": 2378,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2365,
											"end": 2378,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2365,
											"end": 2378,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2365,
											"end": 2378,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2365,
											"end": 2378,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2365,
											"end": 2378,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2365,
											"end": 2378,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2365,
											"end": 2378,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2340,
											"end": 2378,
											"name": "tag",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 2340,
											"end": 2378,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2415,
											"end": 2429,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2415,
											"end": 2429,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2415,
											"end": 2429,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2415,
											"end": 2425,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2415,
											"end": 2429,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2415,
											"end": 2429,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2415,
											"end": 2429,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2415,
											"end": 2429,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2415,
											"end": 2429,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2415,
											"end": 2429,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2415,
											"end": 2429,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2415,
											"end": 2429,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2415,
											"end": 2429,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2415,
											"end": 2429,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2415,
											"end": 2429,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2415,
											"end": 2429,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2415,
											"end": 2436,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2415,
											"end": 2436,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2415,
											"end": 2436,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2432,
											"end": 2436,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2415,
											"end": 2436,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 2415,
											"end": 2436,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2415,
											"end": 2436,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2213,
											"end": 2264,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2213,
											"end": 2264,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2213,
											"end": 2264,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2213,
											"end": 2264,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2280,
											"end": 2298,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 2280,
											"end": 2298,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2280,
											"end": 2298,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2273,
											"end": 2307,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 2273,
											"end": 2307,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2273,
											"end": 2307,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2473,
											"end": 2478,
											"name": "PUSHIMMUTABLE",
											"source": 2,
											"value": "183"
										},
										{
											"begin": 2473,
											"end": 2487,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2487,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2487,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2487,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2487,
											"name": "PUSH",
											"source": 2,
											"value": "A9059CBB"
										},
										{
											"begin": 2473,
											"end": 2487,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2186,
											"end": 2204,
											"name": "PUSH",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 2186,
											"end": 2204,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "tag",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "tag",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2473,
											"end": 2499,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2541,
											"end": 2543,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2535,
											"end": 2552,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2535,
											"end": 2552,
											"name": "PUSH",
											"source": 2,
											"value": "47CEE97CB7ACD717B3C0AA1435D004CD5B3C8C57D70DBCEB4E4458BBD60E39D4"
										},
										{
											"begin": 2545,
											"end": 2551,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2535,
											"end": 2552,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2535,
											"end": 2552,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2535,
											"end": 2552,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 2535,
											"end": 2552,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 160,
											"end": 185,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 160,
											"end": 185,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 148,
											"end": 150,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 133,
											"end": 151,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 133,
											"end": 151,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 14,
											"end": 191,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2535,
											"end": 2552,
											"name": "tag",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 2535,
											"end": 2552,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2535,
											"end": 2552,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2535,
											"end": 2552,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2535,
											"end": 2552,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2535,
											"end": 2552,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2535,
											"end": 2552,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2535,
											"end": 2552,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2535,
											"end": 2552,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 2052,
											"end": 2557,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2052,
											"end": 2557,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1974,
											"end": 2557,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1154,
											"end": 1338,
											"name": "tag",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 1154,
											"end": 1338,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1275,
											"end": 1279,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1327,
											"end": 1331,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1298,
											"end": 1323,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 1311,
											"end": 1316,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 1318,
											"end": 1322,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 1298,
											"end": 1310,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 1298,
											"end": 1323,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1298,
											"end": 1323,
											"name": "tag",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 1298,
											"end": 1323,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1298,
											"end": 1331,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1298,
											"end": 1331,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 1154,
											"end": 1338,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1154,
											"end": 1338,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1689,
											"end": 2351,
											"name": "tag",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 1689,
											"end": 2351,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1772,
											"end": 1779,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1814,
											"end": 1818,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1772,
											"end": 1779,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "tag",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1852,
											"end": 1857,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 1852,
											"end": 1864,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1848,
											"end": 1849,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1848,
											"end": 1864,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1885,
											"end": 1905,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1908,
											"end": 1913,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 1914,
											"end": 1915,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "tag",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1908,
											"end": 1916,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1885,
											"end": 1916,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1885,
											"end": 1916,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1950,
											"end": 1962,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1934,
											"end": 1946,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1934,
											"end": 1962,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2425,
											"end": 2438,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2508,
											"end": 2512,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2554,
											"end": 2558,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2538,
											"end": 2559,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2538,
											"end": 2559,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 2060,
											"end": 2117,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2060,
											"end": 2117,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "53"
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "tag",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2425,
											"end": 2438,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2508,
											"end": 2512,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2554,
											"end": 2558,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2538,
											"end": 2559,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2538,
											"end": 2559,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 2234,
											"end": 2291,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2234,
											"end": 2291,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "tag",
											"source": 1,
											"value": "53"
										},
										{
											"begin": 1930,
											"end": 2306,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "tag",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1866,
											"end": 1869,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "tag",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 1828,
											"end": 2316,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2332,
											"end": 2344,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 1689,
											"end": 2351,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1689,
											"end": 2351,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 196,
											"end": 369,
											"name": "tag",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 196,
											"end": 369,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 264,
											"end": 284,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 264,
											"end": 284,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 313,
											"end": 344,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 313,
											"end": 344,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 303,
											"end": 345,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 303,
											"end": 345,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 293,
											"end": 363,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 293,
											"end": 363,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 359,
											"end": 360,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 357,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 349,
											"end": 361,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 293,
											"end": 363,
											"name": "tag",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 293,
											"end": 363,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 196,
											"end": 369,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 196,
											"end": 369,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 196,
											"end": 369,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 196,
											"end": 369,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 374,
											"end": 1131,
											"name": "tag",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 374,
											"end": 1131,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 478,
											"end": 484,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 486,
											"end": 492,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 494,
											"end": 500,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 502,
											"end": 508,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 555,
											"end": 557,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 543,
											"end": 552,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 534,
											"end": 541,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 530,
											"end": 553,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 526,
											"end": 558,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 523,
											"end": 575,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 523,
											"end": 575,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 523,
											"end": 575,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 571,
											"end": 572,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 568,
											"end": 569,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 561,
											"end": 573,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 523,
											"end": 575,
											"name": "tag",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 523,
											"end": 575,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 594,
											"end": 623,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 613,
											"end": 622,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 594,
											"end": 623,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 594,
											"end": 623,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 594,
											"end": 623,
											"name": "tag",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 594,
											"end": 623,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 584,
											"end": 623,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 584,
											"end": 623,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 670,
											"end": 672,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 659,
											"end": 668,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 655,
											"end": 673,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 642,
											"end": 674,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 632,
											"end": 674,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 632,
											"end": 674,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 725,
											"end": 727,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 714,
											"end": 723,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 710,
											"end": 728,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 697,
											"end": 729,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 748,
											"end": 766,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 789,
											"end": 791,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 781,
											"end": 787,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 778,
											"end": 792,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 775,
											"end": 809,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 775,
											"end": 809,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 775,
											"end": 809,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 805,
											"end": 806,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 802,
											"end": 803,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 795,
											"end": 807,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 775,
											"end": 809,
											"name": "tag",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 775,
											"end": 809,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 843,
											"end": 849,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 832,
											"end": 841,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 828,
											"end": 850,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 818,
											"end": 850,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 818,
											"end": 850,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 888,
											"end": 895,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 881,
											"end": 885,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 877,
											"end": 879,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 873,
											"end": 886,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 869,
											"end": 896,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 859,
											"end": 914,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 859,
											"end": 914,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 910,
											"end": 911,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 907,
											"end": 908,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 900,
											"end": 912,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 859,
											"end": 914,
											"name": "tag",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 859,
											"end": 914,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 950,
											"end": 952,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 937,
											"end": 953,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 976,
											"end": 978,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 968,
											"end": 974,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 965,
											"end": 979,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 962,
											"end": 996,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 962,
											"end": 996,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "68"
										},
										{
											"begin": 962,
											"end": 996,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 992,
											"end": 993,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 989,
											"end": 990,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 982,
											"end": 994,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 962,
											"end": 996,
											"name": "tag",
											"source": 3,
											"value": "68"
										},
										{
											"begin": 962,
											"end": 996,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1045,
											"end": 1052,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 1040,
											"end": 1042,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1030,
											"end": 1036,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1027,
											"end": 1028,
											"name": "PUSH",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 1023,
											"end": 1037,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 1019,
											"end": 1021,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1015,
											"end": 1038,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1011,
											"end": 1043,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1008,
											"end": 1053,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 1005,
											"end": 1070,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1005,
											"end": 1070,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "69"
										},
										{
											"begin": 1005,
											"end": 1070,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1066,
											"end": 1067,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1063,
											"end": 1064,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1056,
											"end": 1068,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1005,
											"end": 1070,
											"name": "tag",
											"source": 3,
											"value": "69"
										},
										{
											"begin": 1005,
											"end": 1070,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 374,
											"end": 1131,
											"name": "SWAP6",
											"source": 3
										},
										{
											"begin": 374,
											"end": 1131,
											"name": "SWAP9",
											"source": 3
										},
										{
											"begin": 374,
											"end": 1131,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 374,
											"end": 1131,
											"name": "SWAP8",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1097,
											"end": 1099,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1089,
											"end": 1100,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1089,
											"end": 1100,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 374,
											"end": 1131,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1136,
											"end": 1322,
											"name": "tag",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 1136,
											"end": 1322,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1195,
											"end": 1201,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1248,
											"end": 1250,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1236,
											"end": 1245,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1227,
											"end": 1234,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1223,
											"end": 1246,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1219,
											"end": 1251,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 1216,
											"end": 1268,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1216,
											"end": 1268,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "71"
										},
										{
											"begin": 1216,
											"end": 1268,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1264,
											"end": 1265,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1261,
											"end": 1262,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1254,
											"end": 1266,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1216,
											"end": 1268,
											"name": "tag",
											"source": 3,
											"value": "71"
										},
										{
											"begin": 1216,
											"end": 1268,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1287,
											"end": 1316,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 1306,
											"end": 1315,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1287,
											"end": 1316,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 1287,
											"end": 1316,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1287,
											"end": 1316,
											"name": "tag",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 1287,
											"end": 1316,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1277,
											"end": 1316,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1136,
											"end": 1322,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1136,
											"end": 1322,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2318,
											"end": 2595,
											"name": "tag",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 2318,
											"end": 2595,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2385,
											"end": 2391,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2438,
											"end": 2440,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2426,
											"end": 2435,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2417,
											"end": 2424,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2413,
											"end": 2436,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2409,
											"end": 2441,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 2406,
											"end": 2458,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2406,
											"end": 2458,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "78"
										},
										{
											"begin": 2406,
											"end": 2458,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2454,
											"end": 2455,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2451,
											"end": 2452,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2444,
											"end": 2456,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2406,
											"end": 2458,
											"name": "tag",
											"source": 3,
											"value": "78"
										},
										{
											"begin": 2406,
											"end": 2458,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2486,
											"end": 2495,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2480,
											"end": 2496,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2539,
											"end": 2544,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2532,
											"end": 2545,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2525,
											"end": 2546,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2518,
											"end": 2523,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2515,
											"end": 2547,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 2505,
											"end": 2565,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 2505,
											"end": 2565,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2561,
											"end": 2562,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2558,
											"end": 2559,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2551,
											"end": 2563,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2782,
											"end": 2909,
											"name": "tag",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 2782,
											"end": 2909,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2843,
											"end": 2853,
											"name": "PUSH",
											"source": 3,
											"value": "4E487B71"
										},
										{
											"begin": 2838,
											"end": 2841,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 2834,
											"end": 2854,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 2831,
											"end": 2832,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2824,
											"end": 2855,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2874,
											"end": 2878,
											"name": "PUSH",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 2871,
											"end": 2872,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2864,
											"end": 2879,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2898,
											"end": 2902,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 2895,
											"end": 2896,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2888,
											"end": 2903,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2914,
											"end": 3146,
											"name": "tag",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 2914,
											"end": 3146,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2953,
											"end": 2956,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2974,
											"end": 2991,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2974,
											"end": 2991,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2974,
											"end": 2991,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2971,
											"end": 3111,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "83"
										},
										{
											"begin": 2971,
											"end": 3111,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3033,
											"end": 3043,
											"name": "PUSH",
											"source": 3,
											"value": "4E487B71"
										},
										{
											"begin": 3028,
											"end": 3031,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 3024,
											"end": 3044,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 3021,
											"end": 3022,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3014,
											"end": 3045,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3068,
											"end": 3072,
											"name": "PUSH",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 3065,
											"end": 3066,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3058,
											"end": 3073,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3096,
											"end": 3100,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 3093,
											"end": 3094,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3086,
											"end": 3101,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2971,
											"end": 3111,
											"name": "tag",
											"source": 3,
											"value": "83"
										},
										{
											"begin": 2971,
											"end": 3111,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3138,
											"end": 3139,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3127,
											"end": 3140,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3127,
											"end": 3140,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2914,
											"end": 3146,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"claim(address,uint256,bytes32[])": "3d13f874",
							"hasClaimed(address)": "73b2e80e",
							"merkleRoot()": "2eb4a7ab",
							"token()": "fc0c546a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInMerkle\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Anish Agnihotri <contact@anishagnihotri.com>Luigy Lemon \",\"details\":\"Solmate ERC20 includes unused _burn logic that can be removed to optimize deployment cost\",\"events\":{\"Claim(address,uint256)\":{\"params\":{\"amount\":\"of tokens claimed\",\"to\":\"recipient of claim\"}}},\"kind\":\"dev\",\"methods\":{\"claim(address,uint256,bytes32[])\":{\"params\":{\"amount\":\"of tokens owed to claimee\",\"proof\":\"merkle proof to prove address and amount are in tree\",\"to\":\"address of claimee\"}},\"constructor\":{\"params\":{\"_merkleRoot\":\"of claimees\",\"_tokenAddress\":\"of token\"}}},\"title\":\"MerkleClaimERC20\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed()\":[{\"notice\":\"Thrown if address has already claimed\"}],\"NotInMerkle()\":[{\"notice\":\"Thrown if address/amount are not part of Merkle tree\"}]},\"events\":{\"Claim(address,uint256)\":{\"notice\":\"Emitted after a successful token claim\"}},\"kind\":\"user\",\"methods\":{\"claim(address,uint256,bytes32[])\":{\"notice\":\"Allows claiming tokens if address is part of merkle tree\"},\"constructor\":{\"notice\":\"Creates a new MerkleClaimERC20 contract for already existing ERC20\"},\"hasClaimed(address)\":{\"notice\":\"Mapping of addresses who have claimed tokens\"},\"merkleRoot()\":{\"notice\":\"ERC20-claimee inclusion root\"}},\"notice\":\"ERC20 claimable by members of a merkle tree\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/MerkleClaimERC20.sol\":\"MerkleClaimERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1aa68fa19422863cc91d23b5896917dbe79175ed47b591148aaeb3e98cb49752\",\"dweb:/ipfs/QmeY64vTRbGhdXcytRKusfJsAfNF4aqr9e1SGBGdCYvW2j\"]},\"contracts/src/MerkleClaimERC20.sol\":{\"keccak256\":\"0xfec8fb4850558fb16fe80f932d567a34a3a0b4720a27ccee9768981c42d4b119\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://935758967f1a911ad96c1768bf0416642d1d7f4cf9b0e1bc168cc56267bfd61e\",\"dweb:/ipfs/QmXsXbn53LJouNqsMybESgR5v6tKq8c7CsDKcA6PJDgURU\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 188,
								"contract": "contracts/src/MerkleClaimERC20.sol:MerkleClaimERC20",
								"label": "hasClaimed",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_bool)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							}
						}
					},
					"userdoc": {
						"errors": {
							"AlreadyClaimed()": [
								{
									"notice": "Thrown if address has already claimed"
								}
							],
							"NotInMerkle()": [
								{
									"notice": "Thrown if address/amount are not part of Merkle tree"
								}
							]
						},
						"events": {
							"Claim(address,uint256)": {
								"notice": "Emitted after a successful token claim"
							}
						},
						"kind": "user",
						"methods": {
							"claim(address,uint256,bytes32[])": {
								"notice": "Allows claiming tokens if address is part of merkle tree"
							},
							"constructor": {
								"notice": "Creates a new MerkleClaimERC20 contract for already existing ERC20"
							},
							"hasClaimed(address)": {
								"notice": "Mapping of addresses who have claimed tokens"
							},
							"merkleRoot()": {
								"notice": "ERC20-claimee inclusion root"
							}
						},
						"notice": "ERC20 claimable by members of a merkle tree",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							77
						]
					},
					"id": 78,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:0",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 77,
							"linearizedBaseContracts": [
								77
							],
							"name": "IERC20",
							"nameLocation": "212:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:0",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 11,
									"name": "Transfer",
									"nameLocation": "394:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "403:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "425:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "445:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:0"
									},
									"src": "388:72:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:0",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 20,
									"name": "Approval",
									"nameLocation": "625:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "634:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "657:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "682:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:0"
									},
									"src": "619:78:0"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:0",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 26,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "820:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:0"
									},
									"scope": 77,
									"src": "774:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:0",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "931:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "971:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:0"
									},
									"scope": 77,
									"src": "912:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:0",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1211:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1223:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1257:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:0"
									},
									"scope": 77,
									"src": "1193:70:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:0",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 54,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1557:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1572:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:0"
									},
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1612:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 51,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:0"
									},
									"scope": 77,
									"src": "1538:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 64,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2291:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2308:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 58,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2342:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 61,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:0"
									},
									"scope": 77,
									"src": "2274:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:0",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 76,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2677:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2699:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2719:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2758:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 73,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:0"
									},
									"scope": 77,
									"src": "2646:118:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 78,
							"src": "202:2564:0",
							"usedErrors": []
						}
					],
					"src": "106:2661:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
					"exportedSymbols": {
						"MerkleProof": [
							170
						]
					},
					"id": 171,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 79,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "118:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MerkleProof",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 80,
								"nodeType": "StructuredDocumentation",
								"src": "143:656:1",
								"text": " @dev These functions deal with verification of Merkle Trees proofs.\n The proofs can be generated using the JavaScript library\n https://github.com/miguelmota/merkletreejs[merkletreejs].\n Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value."
							},
							"fullyImplemented": true,
							"id": 170,
							"linearizedBaseContracts": [
								170
							],
							"name": "MerkleProof",
							"nameLocation": "808:11:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 100,
										"nodeType": "Block",
										"src": "1281:57:1",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 98,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 94,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 84,
																"src": "1311:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 95,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 88,
																"src": "1318:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 93,
															"name": "processProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 158,
															"src": "1298:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bytes32) pure returns (bytes32)"
															}
														},
														"id": 96,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1298:25:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 97,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 86,
														"src": "1327:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1298:33:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 92,
												"id": 99,
												"nodeType": "Return",
												"src": "1291:40:1"
											}
										]
									},
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "826:323:1",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."
									},
									"id": 101,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verify",
									"nameLocation": "1163:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "1196:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "1179:22:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 82,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1179:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 83,
													"nodeType": "ArrayTypeName",
													"src": "1179:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "1219:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "1211:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 85,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 88,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "1241:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "1233:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 87,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1169:82:1"
									},
									"returnParameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "1275:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 90,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1275:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1274:6:1"
									},
									"scope": 170,
									"src": "1154:184:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 157,
										"nodeType": "Block",
										"src": "1781:570:1",
										"statements": [
											{
												"assignments": [
													113
												],
												"declarations": [
													{
														"constant": false,
														"id": 113,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "1799:12:1",
														"nodeType": "VariableDeclaration",
														"scope": 157,
														"src": "1791:20:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 112,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1791:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 115,
												"initialValue": {
													"id": 114,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 107,
													"src": "1814:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1791:27:1"
											},
											{
												"body": {
													"id": 153,
													"nodeType": "Block",
													"src": "1871:445:1",
													"statements": [
														{
															"assignments": [
																128
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 128,
																	"mutability": "mutable",
																	"name": "proofElement",
																	"nameLocation": "1893:12:1",
																	"nodeType": "VariableDeclaration",
																	"scope": 153,
																	"src": "1885:20:1",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 127,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "1885:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 132,
															"initialValue": {
																"baseExpression": {
																	"id": 129,
																	"name": "proof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 105,
																	"src": "1908:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																		"typeString": "bytes32[] memory"
																	}
																},
																"id": 131,
																"indexExpression": {
																	"id": 130,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 117,
																	"src": "1914:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1908:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1885:31:1"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"id": 135,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 133,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 113,
																	"src": "1934:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 134,
																	"name": "proofElement",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 128,
																	"src": "1950:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "1934:28:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 151,
																"nodeType": "Block",
																"src": "2138:168:1",
																"statements": [
																	{
																		"expression": {
																			"id": 149,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 144,
																				"name": "computedHash",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 113,
																				"src": "2234:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [
																					{
																						"id": 146,
																						"name": "proofElement",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 128,
																						"src": "2264:12:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					{
																						"id": 147,
																						"name": "computedHash",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 113,
																						"src": "2278:12:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 145,
																					"name": "_efficientHash",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 169,
																					"src": "2249:14:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																						"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																					}
																				},
																				"id": 148,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2249:42:1",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "2234:57:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 150,
																		"nodeType": "ExpressionStatement",
																		"src": "2234:57:1"
																	}
																]
															},
															"id": 152,
															"nodeType": "IfStatement",
															"src": "1930:376:1",
															"trueBody": {
																"id": 143,
																"nodeType": "Block",
																"src": "1964:168:1",
																"statements": [
																	{
																		"expression": {
																			"id": 141,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 136,
																				"name": "computedHash",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 113,
																				"src": "2060:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [
																					{
																						"id": 138,
																						"name": "computedHash",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 113,
																						"src": "2090:12:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					{
																						"id": 139,
																						"name": "proofElement",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 128,
																						"src": "2104:12:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 137,
																					"name": "_efficientHash",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 169,
																					"src": "2075:14:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																						"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																					}
																				},
																				"id": 140,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2075:42:1",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "2060:57:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 142,
																		"nodeType": "ExpressionStatement",
																		"src": "2060:57:1"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 120,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 117,
														"src": "1848:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 121,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 105,
															"src": "1852:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																"typeString": "bytes32[] memory"
															}
														},
														"id": 122,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1852:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1848:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 154,
												"initializationExpression": {
													"assignments": [
														117
													],
													"declarations": [
														{
															"constant": false,
															"id": 117,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1841:1:1",
															"nodeType": "VariableDeclaration",
															"scope": 154,
															"src": "1833:9:1",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 116,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1833:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 119,
													"initialValue": {
														"hexValue": "30",
														"id": 118,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1845:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1833:13:1"
												},
												"loopExpression": {
													"expression": {
														"id": 125,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1866:3:1",
														"subExpression": {
															"id": 124,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 117,
															"src": "1866:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 126,
													"nodeType": "ExpressionStatement",
													"src": "1866:3:1"
												},
												"nodeType": "ForStatement",
												"src": "1828:488:1"
											},
											{
												"expression": {
													"id": 155,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 113,
													"src": "2332:12:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 111,
												"id": 156,
												"nodeType": "Return",
												"src": "2325:19:1"
											}
										]
									},
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "1344:340:1",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"
									},
									"id": 158,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProof",
									"nameLocation": "1698:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 105,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "1728:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "1711:22:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 103,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1711:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 104,
													"nodeType": "ArrayTypeName",
													"src": "1711:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "1743:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "1735:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 106,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1735:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1710:38:1"
									},
									"returnParameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "1772:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 109,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1772:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1771:9:1"
									},
									"scope": 170,
									"src": "1689:662:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 168,
										"nodeType": "Block",
										"src": "2440:135:1",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2459:110:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2480:4:1",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "2486:1:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2473:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2473:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2473:15:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2508:4:1",
																		"type": "",
																		"value": "0x20"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "2514:1:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2501:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2501:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2501:15:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2529:30:1",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2548:4:1",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2554:4:1",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "2538:9:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2538:21:1"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2529:5:1"
																}
															]
														}
													]
												},
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 160,
														"isOffset": false,
														"isSlot": false,
														"src": "2486:1:1",
														"valueSize": 1
													},
													{
														"declaration": 162,
														"isOffset": false,
														"isSlot": false,
														"src": "2514:1:1",
														"valueSize": 1
													},
													{
														"declaration": 165,
														"isOffset": false,
														"isSlot": false,
														"src": "2529:5:1",
														"valueSize": 1
													}
												],
												"id": 167,
												"nodeType": "InlineAssembly",
												"src": "2450:119:1"
											}
										]
									},
									"id": 169,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_efficientHash",
									"nameLocation": "2366:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2389:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 169,
												"src": "2381:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 159,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2381:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2400:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 169,
												"src": "2392:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 161,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2392:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2380:22:1"
									},
									"returnParameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2433:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 169,
												"src": "2425:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 164,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2425:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2424:15:1"
									},
									"scope": 170,
									"src": "2357:218:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 171,
							"src": "800:1777:1",
							"usedErrors": []
						}
					],
					"src": "118:2460:1"
				},
				"id": 1
			},
			"contracts/src/MerkleClaimERC20.sol": {
				"ast": {
					"absolutePath": "contracts/src/MerkleClaimERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							77
						],
						"MerkleClaimERC20": [
							283
						],
						"MerkleProof": [
							170
						]
					},
					"id": 284,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 172,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "42:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 174,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 284,
							"sourceUnit": 78,
							"src": "106:72:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 173,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 77,
										"src": "115:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"file": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"id": 176,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 284,
							"sourceUnit": 171,
							"src": "197:89:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 175,
										"name": "MerkleProof",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 170,
										"src": "206:11:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MerkleClaimERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 177,
								"nodeType": "StructuredDocumentation",
								"src": "307:265:2",
								"text": "@title MerkleClaimERC20\n @notice ERC20 claimable by members of a merkle tree\n @author Anish Agnihotri <contact@anishagnihotri.com>\n @author Luigy Lemon \n @dev Solmate ERC20 includes unused _burn logic that can be removed to optimize deployment cost"
							},
							"fullyImplemented": true,
							"id": 283,
							"linearizedBaseContracts": [
								283
							],
							"name": "MerkleClaimERC20",
							"nameLocation": "581:16:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 178,
										"nodeType": "StructuredDocumentation",
										"src": "654:40:2",
										"text": "@notice ERC20-claimee inclusion root"
									},
									"functionSelector": "2eb4a7ab",
									"id": 180,
									"mutability": "immutable",
									"name": "merkleRoot",
									"nameLocation": "722:10:2",
									"nodeType": "VariableDeclaration",
									"scope": 283,
									"src": "697:35:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 179,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "fc0c546a",
									"id": 183,
									"mutability": "immutable",
									"name": "token",
									"nameLocation": "760:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 283,
									"src": "736:29:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$77",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 182,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 181,
											"name": "IERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 77,
											"src": "736:6:2"
										},
										"referencedDeclaration": 77,
										"src": "736:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$77",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 184,
										"nodeType": "StructuredDocumentation",
										"src": "818:56:2",
										"text": "@notice Mapping of addresses who have claimed tokens"
									},
									"functionSelector": "73b2e80e",
									"id": 188,
									"mutability": "mutable",
									"name": "hasClaimed",
									"nameLocation": "909:10:2",
									"nodeType": "VariableDeclaration",
									"scope": 283,
									"src": "877:42:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 187,
										"keyType": {
											"id": 185,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "885:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "877:24:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueType": {
											"id": 186,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "896:4:2",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 189,
										"nodeType": "StructuredDocumentation",
										"src": "964:49:2",
										"text": "@notice Thrown if address has already claimed"
									},
									"errorSelector": "646cf558",
									"id": 191,
									"name": "AlreadyClaimed",
									"nameLocation": "1022:14:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1036:2:2"
									},
									"src": "1016:23:2"
								},
								{
									"documentation": {
										"id": 192,
										"nodeType": "StructuredDocumentation",
										"src": "1042:64:2",
										"text": "@notice Thrown if address/amount are not part of Merkle tree"
									},
									"errorSelector": "8a585be2",
									"id": 194,
									"name": "NotInMerkle",
									"nameLocation": "1115:11:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1126:2:2"
									},
									"src": "1109:20:2"
								},
								{
									"body": {
										"id": 212,
										"nodeType": "Block",
										"src": "1400:85:2",
										"statements": [
											{
												"expression": {
													"id": 204,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 202,
														"name": "merkleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 180,
														"src": "1406:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 203,
														"name": "_merkleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 199,
														"src": "1419:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1406:24:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 205,
												"nodeType": "ExpressionStatement",
												"src": "1406:24:2"
											},
											{
												"expression": {
													"id": 210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 206,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 183,
														"src": "1451:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$77",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 208,
																"name": "_tokenAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 197,
																"src": "1466:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 207,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 77,
															"src": "1459:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$77_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 209,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1459:21:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$77",
															"typeString": "contract IERC20"
														}
													},
													"src": "1451:29:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"id": 211,
												"nodeType": "ExpressionStatement",
												"src": "1451:29:2"
											}
										]
									},
									"documentation": {
										"id": 195,
										"nodeType": "StructuredDocumentation",
										"src": "1178:151:2",
										"text": "@notice Creates a new MerkleClaimERC20 contract for already existing ERC20\n @param _tokenAddress of token\n @param _merkleRoot of claimees"
									},
									"id": 213,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "_tokenAddress",
												"nameLocation": "1357:13:2",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "1349:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 196,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1349:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "_merkleRoot",
												"nameLocation": "1384:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "1376:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 198,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1376:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1343:56:2"
									},
									"returnParameters": {
										"id": 201,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1400:0:2"
									},
									"scope": 283,
									"src": "1332:153:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 214,
										"nodeType": "StructuredDocumentation",
										"src": "1529:123:2",
										"text": "@notice Emitted after a successful token claim\n @param to recipient of claim\n @param amount of tokens claimed"
									},
									"eventSelector": "47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4",
									"id": 220,
									"name": "Claim",
									"nameLocation": "1661:5:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 216,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1683:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "1667:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 215,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1667:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 218,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1695:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "1687:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 217,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1687:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1666:36:2"
									},
									"src": "1655:48:2"
								},
								{
									"body": {
										"id": 281,
										"nodeType": "Block",
										"src": "2052:505:2",
										"statements": [
											{
												"condition": {
													"baseExpression": {
														"id": 231,
														"name": "hasClaimed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 188,
														"src": "2113:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 233,
													"indexExpression": {
														"id": 232,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 223,
														"src": "2124:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2113:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 237,
												"nodeType": "IfStatement",
												"src": "2109:43:2",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 234,
															"name": "AlreadyClaimed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 191,
															"src": "2136:14:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 235,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2136:16:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 236,
													"nodeType": "RevertStatement",
													"src": "2129:23:2"
												}
											},
											{
												"assignments": [
													239
												],
												"declarations": [
													{
														"constant": false,
														"id": 239,
														"mutability": "mutable",
														"name": "leaf",
														"nameLocation": "2220:4:2",
														"nodeType": "VariableDeclaration",
														"scope": 281,
														"src": "2212:12:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 238,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2212:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 247,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 243,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 223,
																	"src": "2254:2:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 244,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 225,
																	"src": "2258:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 241,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2237:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 242,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "2237:16:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 245,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2237:28:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 240,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2227:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2227:39:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2212:54:2"
											},
											{
												"assignments": [
													249
												],
												"declarations": [
													{
														"constant": false,
														"id": 249,
														"mutability": "mutable",
														"name": "isValidLeaf",
														"nameLocation": "2277:11:2",
														"nodeType": "VariableDeclaration",
														"scope": 281,
														"src": "2272:16:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 248,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2272:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 256,
												"initialValue": {
													"arguments": [
														{
															"id": 252,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 228,
															"src": "2310:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																"typeString": "bytes32[] calldata"
															}
														},
														{
															"id": 253,
															"name": "merkleRoot",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 180,
															"src": "2317:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 254,
															"name": "leaf",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 239,
															"src": "2329:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																"typeString": "bytes32[] calldata"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 250,
															"name": "MerkleProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 170,
															"src": "2291:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_MerkleProof_$170_$",
																"typeString": "type(library MerkleProof)"
															}
														},
														"id": 251,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "verify",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 101,
														"src": "2291:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
														}
													},
													"id": 255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2291:43:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2272:62:2"
											},
											{
												"condition": {
													"id": 258,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2344:12:2",
													"subExpression": {
														"id": 257,
														"name": "isValidLeaf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 249,
														"src": "2345:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 262,
												"nodeType": "IfStatement",
												"src": "2340:38:2",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 259,
															"name": "NotInMerkle",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 194,
															"src": "2365:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 260,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2365:13:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 261,
													"nodeType": "RevertStatement",
													"src": "2358:20:2"
												}
											},
											{
												"expression": {
													"id": 267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 263,
															"name": "hasClaimed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 188,
															"src": "2415:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 265,
														"indexExpression": {
															"id": 264,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 223,
															"src": "2426:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2415:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 266,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2432:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2415:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 268,
												"nodeType": "ExpressionStatement",
												"src": "2415:21:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 272,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 223,
															"src": "2488:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 273,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 225,
															"src": "2492:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 269,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 183,
															"src": "2473:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														"id": 271,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 44,
														"src": "2473:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2473:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 275,
												"nodeType": "ExpressionStatement",
												"src": "2473:26:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 277,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 223,
															"src": "2541:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 278,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 225,
															"src": "2545:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 276,
														"name": "Claim",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 220,
														"src": "2535:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 279,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2535:17:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 280,
												"nodeType": "EmitStatement",
												"src": "2530:22:2"
											}
										]
									},
									"documentation": {
										"id": 221,
										"nodeType": "StructuredDocumentation",
										"src": "1750:221:2",
										"text": "@notice Allows claiming tokens if address is part of merkle tree\n @param to address of claimee\n @param amount of tokens owed to claimee\n @param proof merkle proof to prove address and amount are in tree"
									},
									"functionSelector": "3d13f874",
									"id": 282,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "claim",
									"nameLocation": "1983:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1997:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 282,
												"src": "1989:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 222,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1989:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2009:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 282,
												"src": "2001:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 224,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2001:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "2036:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 282,
												"src": "2017:24:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 226,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "2017:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 227,
													"nodeType": "ArrayTypeName",
													"src": "2017:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1988:54:2"
									},
									"returnParameters": {
										"id": 230,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2052:0:2"
									},
									"scope": 283,
									"src": "1974:583:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 284,
							"src": "572:1987:2",
							"usedErrors": [
								191,
								194
							]
						}
					],
					"src": "42:2518:2"
				},
				"id": 2
			}
		}
	}
}